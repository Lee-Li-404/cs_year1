;(let ((double-any (lambda (f x) (f x x)))) (double-any cons 6))
;(let ((x 'a))
 ; (let ((f (lambda (y) (list x y))))
 ;   (f 'b)))
;(let ((f 1)) (+ f 1))
;((lambda(c) (+ c 1)) 1)
;(define complexEcho(lambda(num cnt) (if (equal? num 0) cnt (complexEcho (- num 1) (+ 1 cnt)))))
;(complexEcho 99 0)
;(define keep-first-n (lambda(num x) (if (or (> num (length x)) (< num 0)) #f (if (equal? 0 num)  '() (cons (car x) (keep-first-n (- num 1) (cdr x)))))))
;(keep-first-n -1 '(a b c d e f g h i))
;(keep-first-n 8 '(a b c d e f g h i))
;(define sum1(lambda(x total) (if (equal? 0 (length x)) total (sum1 (cdr x) (+ total (car x))))))
;(define sum(lambda(x) (sum1 x 0)))
;(sum '(5 5 0 5 7))
(define sum2 (lambda(x)
(cond
((= (length x) 0) "empty")
 ((= (length x) 1) (car x))
 (else (sum2 (append (list (+ (car x) (car (cdr x)))) (cdr(cdr x))))))))
(sum2 '(5 5 0 5 7))
 